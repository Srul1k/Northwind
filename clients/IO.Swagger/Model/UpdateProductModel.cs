/* 
 * Northwind API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateProductModel
    /// </summary>
    [DataContract]
        public partial class UpdateProductModel :  IEquatable<UpdateProductModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProductModel" /> class.
        /// </summary>
        /// <param name="productID">productID (required).</param>
        /// <param name="productName">productName (required).</param>
        /// <param name="quantityPerUnit">quantityPerUnit.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="unitsInStock">unitsInStock.</param>
        /// <param name="unitsOnOrder">unitsOnOrder.</param>
        /// <param name="reorderLevel">reorderLevel.</param>
        /// <param name="discontinued">discontinued (required).</param>
        /// <param name="supplierID">supplierID.</param>
        /// <param name="categoryID">categoryID.</param>
        public UpdateProductModel(int? productID = default(int?), string productName = default(string), string quantityPerUnit = default(string), decimal? unitPrice = default(decimal?), int? unitsInStock = default(int?), int? unitsOnOrder = default(int?), int? reorderLevel = default(int?), bool? discontinued = default(bool?), int? supplierID = default(int?), int? categoryID = default(int?))
        {
            // to ensure "productID" is required (not null)
            if (productID == null)
            {
                throw new InvalidDataException("productID is a required property for UpdateProductModel and cannot be null");
            }
            else
            {
                this.ProductID = productID;
            }
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new InvalidDataException("productName is a required property for UpdateProductModel and cannot be null");
            }
            else
            {
                this.ProductName = productName;
            }
            // to ensure "discontinued" is required (not null)
            if (discontinued == null)
            {
                throw new InvalidDataException("discontinued is a required property for UpdateProductModel and cannot be null");
            }
            else
            {
                this.Discontinued = discontinued;
            }
            this.QuantityPerUnit = quantityPerUnit;
            this.UnitPrice = unitPrice;
            this.UnitsInStock = unitsInStock;
            this.UnitsOnOrder = unitsOnOrder;
            this.ReorderLevel = reorderLevel;
            this.SupplierID = supplierID;
            this.CategoryID = categoryID;
        }
        
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerUnit
        /// </summary>
        [DataMember(Name="quantityPerUnit", EmitDefaultValue=false)]
        public string QuantityPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public decimal? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitsInStock
        /// </summary>
        [DataMember(Name="unitsInStock", EmitDefaultValue=false)]
        public int? UnitsInStock { get; set; }

        /// <summary>
        /// Gets or Sets UnitsOnOrder
        /// </summary>
        [DataMember(Name="unitsOnOrder", EmitDefaultValue=false)]
        public int? UnitsOnOrder { get; set; }

        /// <summary>
        /// Gets or Sets ReorderLevel
        /// </summary>
        [DataMember(Name="reorderLevel", EmitDefaultValue=false)]
        public int? ReorderLevel { get; set; }

        /// <summary>
        /// Gets or Sets Discontinued
        /// </summary>
        [DataMember(Name="discontinued", EmitDefaultValue=false)]
        public bool? Discontinued { get; set; }

        /// <summary>
        /// Gets or Sets SupplierID
        /// </summary>
        [DataMember(Name="supplierID", EmitDefaultValue=false)]
        public int? SupplierID { get; set; }

        /// <summary>
        /// Gets or Sets CategoryID
        /// </summary>
        [DataMember(Name="categoryID", EmitDefaultValue=false)]
        public int? CategoryID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateProductModel {\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  QuantityPerUnit: ").Append(QuantityPerUnit).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitsInStock: ").Append(UnitsInStock).Append("\n");
            sb.Append("  UnitsOnOrder: ").Append(UnitsOnOrder).Append("\n");
            sb.Append("  ReorderLevel: ").Append(ReorderLevel).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("  SupplierID: ").Append(SupplierID).Append("\n");
            sb.Append("  CategoryID: ").Append(CategoryID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateProductModel);
        }

        /// <summary>
        /// Returns true if UpdateProductModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateProductModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateProductModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.QuantityPerUnit == input.QuantityPerUnit ||
                    (this.QuantityPerUnit != null &&
                    this.QuantityPerUnit.Equals(input.QuantityPerUnit))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.UnitsInStock == input.UnitsInStock ||
                    (this.UnitsInStock != null &&
                    this.UnitsInStock.Equals(input.UnitsInStock))
                ) && 
                (
                    this.UnitsOnOrder == input.UnitsOnOrder ||
                    (this.UnitsOnOrder != null &&
                    this.UnitsOnOrder.Equals(input.UnitsOnOrder))
                ) && 
                (
                    this.ReorderLevel == input.ReorderLevel ||
                    (this.ReorderLevel != null &&
                    this.ReorderLevel.Equals(input.ReorderLevel))
                ) && 
                (
                    this.Discontinued == input.Discontinued ||
                    (this.Discontinued != null &&
                    this.Discontinued.Equals(input.Discontinued))
                ) && 
                (
                    this.SupplierID == input.SupplierID ||
                    (this.SupplierID != null &&
                    this.SupplierID.Equals(input.SupplierID))
                ) && 
                (
                    this.CategoryID == input.CategoryID ||
                    (this.CategoryID != null &&
                    this.CategoryID.Equals(input.CategoryID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.QuantityPerUnit != null)
                    hashCode = hashCode * 59 + this.QuantityPerUnit.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.UnitsInStock != null)
                    hashCode = hashCode * 59 + this.UnitsInStock.GetHashCode();
                if (this.UnitsOnOrder != null)
                    hashCode = hashCode * 59 + this.UnitsOnOrder.GetHashCode();
                if (this.ReorderLevel != null)
                    hashCode = hashCode * 59 + this.ReorderLevel.GetHashCode();
                if (this.Discontinued != null)
                    hashCode = hashCode * 59 + this.Discontinued.GetHashCode();
                if (this.SupplierID != null)
                    hashCode = hashCode * 59 + this.SupplierID.GetHashCode();
                if (this.CategoryID != null)
                    hashCode = hashCode * 59 + this.CategoryID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
